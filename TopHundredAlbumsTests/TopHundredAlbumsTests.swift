//
//  TopHundredAlbumsTests.swift
//  TopHundredAlbumsTests
//
//  Created by chris davis on 2/8/20.
//  Copyright Â© 2020 Woohyun David Lee. All rights reserved.
//

import XCTest
@testable import TopHundredAlbums

class TopHundredAlbumsTests: XCTestCase {
    
    var sut: MainViewModel?
    var mockApiService: MockApiService?

    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.
        super.setUp()
        //inject MockApiService into MainViewModel for testing
        mockApiService = MockApiService()
        guard let mockApi = mockApiService else {return}
        sut = MainViewModel(mockApi)
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        sut = nil
        mockApiService = nil
        super.tearDown()
    }

    func testFetchAlbum() {
        //check whether MainViewModel.fetch is called or not
        guard let sut = sut, let mockApi = mockApiService else {return}
        //Given
        mockApi.albums = [Album]()
        //When
        sut.fetch()
        //Assert
        XCTAssert(mockApi.isFetchCalled)
    }
    
    func testFetchAlbumFailure(){
        //test when MainViewModel.fetch failed
        guard let sut = sut, let mockApi = mockApiService else {return}
        //Given
        let error = ApiServiceError.DataFetchError
        
        //When
        sut.fetch()
        mockApi.fail(error)
        
        //Assert
        XCTAssertEqual("\(error)", sut.errorMessage)
    }
    
    func testIfTableviewIsRefreshed(){
        //test whether tableview is reloaded when data loading is finished
        guard let sut = sut, let mockApi = mockApiService else {return}
        let expectation = XCTestExpectation(description: "tableview is refreshed")
        
        AlbumDataGenerator().generateAlbum { (albums) in
            //Given
            mockApi.albums = albums
            sut.tableViewReloadClosure = { () in
                expectation.fulfill()
            }
            
            //When
            sut.fetch()
            mockApi.successful()
            
        }
        
        //Assert
        wait(for: [expectation], timeout: 5.0)
    }
    
    func testIfAlbumCellViewModelsAreGenerated(){
        //test whether album cell view models are generated by checking numberOfCells value
        guard let sut = sut, let mockApi = mockApiService else {return}
        
        AlbumDataGenerator().generateAlbum { (albums) in
            //Given
            mockApi.albums = albums
            
            //When
            sut.fetch()
            mockApi.successful()
            
            //Assert
            XCTAssertEqual(albums.count, sut.numberOfCells)
        }
    }
    
    func testGetAlbumCellViewModel(){
        guard let sut = sut, let mockApi = mockApiService else {return}
        
        AlbumDataGenerator().generateAlbum { (albums) in
            //Given
            mockApi.albums = albums
            let indexPath = IndexPath(row: 40, section: 0)
            let downloadedAlbum = albums[indexPath.row]
            
            //When
            sut.fetch()
            mockApi.successful()
            let beingTestedViewModel = sut.getAlbumCellViewModel(indexPath)
            
            //Assert
            XCTAssertEqual(downloadedAlbum.albumName, beingTestedViewModel.albumName)
            XCTAssertEqual(downloadedAlbum.albumArt, beingTestedViewModel.albumArt)
            XCTAssertEqual(downloadedAlbum.artistName, beingTestedViewModel.artistName)
        }
    }
    
    func testGetAlbum(){
        guard let sut = sut, let mockApi = mockApiService else {return}
        
        //Given
        AlbumDataGenerator().generateAlbum({ (albums) in
            //Given
            mockApi.albums = albums
            let testAlbums = albums
            
            //When
            sut.fetch()
            mockApi.successful()
            
            //Assert
            XCTAssertEqual(testAlbums[7].albumName, sut.getAlbum(IndexPath(row: 7, section: 0)).albumName)
        })
    }
}

class MockApiService: ApiServiceProtocol {
    var isFetchCalled = false
    
    var albums = [Album]()
    var completeClosure: ((Bool, [Album], ApiServiceError?)->())?
    
    func fetchTopHundredAlbums(_ completion: @escaping (_ fetchSuccess: Bool, _ albums: [Album], _ error: ApiServiceError?) -> ()) {
        isFetchCalled = true
        completeClosure = completion
    }
    
    //mimic data fetch success
    func successful(){
        completeClosure?(true, albums, nil)
    }
    
    //mimic data fetch failure
    func fail(_ error: ApiServiceError?){
        completeClosure?(false, albums, error)
    }
}

class AlbumDataGenerator {
    //download album data then provide it as array for testing
    func generateAlbum(_ completion: @escaping([Album])->()){
        guard let url = URL(string: Constants.RSSURL) else {return}
        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in
            guard let dataResponse = data else {
                print("download error")
                return
            }
            do {
                let downloadedAlbum = try JSONDecoder().decode(TopHundredAlbums.self, from: dataResponse)
                completion(downloadedAlbum.feed.albums)
                
            }catch let error {
                print(error.localizedDescription)
                return
            }
        }
        task.resume()
    }
}
